{
	"name": "df_all_cleansed_to_structured",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_cleansed_orders",
						"type": "DatasetReference"
					},
					"name": "orders"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_order_items",
						"type": "DatasetReference"
					},
					"name": "orderitems"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_stores",
						"type": "DatasetReference"
					},
					"name": "stores"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_products",
						"type": "DatasetReference"
					},
					"name": "products"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_structured_orders",
						"type": "DatasetReference"
					},
					"name": "StructuredOrdersSink"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_stores",
						"type": "DatasetReference"
					},
					"name": "StructuredStoresSink"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_products",
						"type": "DatasetReference"
					},
					"name": "StructuredProducts"
				}
			],
			"transformations": [
				{
					"name": "OrderWithOrderItem"
				},
				{
					"name": "orderDropColumns"
				},
				{
					"name": "orderItemDropColumns"
				},
				{
					"name": "CalcSubtotalAndTimeStamp"
				},
				{
					"name": "CalcTimeStamp"
				},
				{
					"name": "CalcTimeStampP"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATE as date,",
				"          CUSTOMER_ID as integer,",
				"          STORE_ID as integer,",
				"          UPDATED_TIMESTAMP as timestamp,",
				"          ORDER_STATUS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> orders",
				"source(output(",
				"          ORDER_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> orderitems",
				"source(output(",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          UPDATE_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> stores",
				"source(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double,",
				"          UPDATE_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> products",
				"orderDropColumns, orderItemDropColumns join(orderDropColumns@ORDER_ID == orderItemDropColumns@ORDER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> OrderWithOrderItem",
				"orders select(mapColumn(",
				"          ORDER_ID,",
				"          ORDER_DATE,",
				"          CUSTOMER_ID,",
				"          STORE_ID,",
				"          ORDER_STATUS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> orderDropColumns",
				"orderitems select(mapColumn(",
				"          ORDER_ID,",
				"          PRODUCT_ID,",
				"          UNIT_PRICE,",
				"          QUANTITY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> orderItemDropColumns",
				"OrderWithOrderItem derive(SUBTOTAL = UNIT_PRICE * QUANTITY,",
				"          UPDATED_TIMESTAMP = currentUTC()) ~> CalcSubtotalAndTimeStamp",
				"stores derive(UPDATE_TIMESTAMP = currentUTC()) ~> CalcTimeStamp",
				"products derive(UPDATE_TIMESTAMP = currentUTC()) ~> CalcTimeStampP",
				"CalcSubtotalAndTimeStamp sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StructuredOrdersSink",
				"CalcTimeStamp sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StructuredStoresSink",
				"CalcTimeStampP sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StructuredProducts"
			]
		}
	}
}
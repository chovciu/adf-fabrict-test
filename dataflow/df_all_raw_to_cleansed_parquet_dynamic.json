{
	"name": "df_all_raw_to_cleansed_parquet_dynamic",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_orders_dynamic",
						"type": "DatasetReference"
					},
					"name": "OrdersRaw"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_fabrictest_items_dynamic",
						"type": "DatasetReference"
					},
					"name": "OrdersItemRaw"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_fabrictest_products_dynamic",
						"type": "DatasetReference"
					},
					"name": "ProductsRaw"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_fabrictest_stores_dynamic",
						"type": "DatasetReference"
					},
					"name": "StoresRaw"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_fabrictest_customers_dynamic",
						"type": "DatasetReference"
					},
					"name": "CustomersRaw"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_cleansed_orders_dynamic",
						"type": "DatasetReference"
					},
					"name": "OrdersSink"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_order_items_dynamic",
						"type": "DatasetReference"
					},
					"name": "OrdersItemSink"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_customers_dynamic",
						"type": "DatasetReference"
					},
					"name": "CustomersSink"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_products_dynamic",
						"type": "DatasetReference"
					},
					"name": "ProductsSink"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_stores_dynamic",
						"type": "DatasetReference"
					},
					"name": "StoresSink"
				}
			],
			"transformations": [
				{
					"name": "OrderDateAndUpdatedTimeStamp"
				},
				{
					"name": "CastDataTypesOrders"
				},
				{
					"name": "DropOrderDateTimeAndReorder"
				},
				{
					"name": "UpdatedTimestamp"
				},
				{
					"name": "UpdatedTimeStampProducts"
				},
				{
					"name": "UpdatedTimeStampStores"
				},
				{
					"name": "CastDataTypesOrderItems"
				},
				{
					"name": "CastDataTypesProducts"
				},
				{
					"name": "CastDataTypesStores"
				},
				{
					"name": "CastDataTypesCustomers"
				},
				{
					"name": "DropLineItemID"
				},
				{
					"name": "DropWebAddressAndReorder"
				},
				{
					"name": "UpdatedTimestampCustomers"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORDER_ID as string,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as string,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OrdersRaw",
				"source(output(",
				"          ORDER_ID as string,",
				"          LINE_ITEM_ID as string,",
				"          PRODUCT_ID as string,",
				"          UNIT_PRICE as string,",
				"          QUANTITY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> OrdersItemRaw",
				"source(output(",
				"          PRODUCT_ID as string,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> ProductsRaw",
				"source(output(",
				"          STORE_ID as string,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> StoresRaw",
				"source(output(",
				"          CUSTOMER_ID as string,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> CustomersRaw",
				"OrdersRaw derive(ORDER_DATE = toDate(ORDER_DATETIME,'dd-MMM-yy HH.mm.ss.SS'),",
				"          UPDATED_TIMESTAMP = currentUTC()) ~> OrderDateAndUpdatedTimeStamp",
				"OrderDateAndUpdatedTimeStamp cast(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          ORDER_DATE as date,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     errors: true) ~> CastDataTypesOrders",
				"CastDataTypesOrders select(mapColumn(",
				"          ORDER_ID,",
				"          ORDER_DATE,",
				"          CUSTOMER_ID,",
				"          ORDER_STATUS,",
				"          STORE_ID,",
				"          UPDATED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropOrderDateTimeAndReorder",
				"OrdersItemRaw derive(UPDATED_TIMESTAMP = currentUTC()) ~> UpdatedTimestamp",
				"ProductsRaw derive(UPDATE_TIMESTAMP = currentUTC()) ~> UpdatedTimeStampProducts",
				"StoresRaw derive(UPDATE_TIMESTAMP = currentUTC()) ~> UpdatedTimeStampStores",
				"UpdatedTimestamp cast(output(",
				"          ORDER_ID as integer,",
				"          LINE_ITEM_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     errors: true) ~> CastDataTypesOrderItems",
				"UpdatedTimeStampProducts cast(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double,",
				"          UPDATE_TIMESTAMP as timestamp",
				"     ),",
				"     errors: true) ~> CastDataTypesProducts",
				"UpdatedTimeStampStores cast(output(",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string,",
				"          UPDATE_TIMESTAMP as timestamp",
				"     ),",
				"     errors: true) ~> CastDataTypesStores",
				"CustomersRaw cast(output(",
				"          CUSTOMER_ID as integer,",
				"          EMAIL_ADDRESS as string,",
				"          FULL_NAME as string",
				"     ),",
				"     errors: true) ~> CastDataTypesCustomers",
				"CastDataTypesOrderItems select(mapColumn(",
				"          ORDER_ID,",
				"          PRODUCT_ID,",
				"          UNIT_PRICE,",
				"          QUANTITY,",
				"          UPDATED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropLineItemID",
				"CastDataTypesStores select(mapColumn(",
				"          STORE_ID,",
				"          STORE_NAME,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          UPDATE_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropWebAddressAndReorder",
				"CastDataTypesCustomers derive(UPDATED_TIMESTAMP = currentUTC()) ~> UpdatedTimestampCustomers",
				"DropOrderDateTimeAndReorder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ORDER_ID as integer,",
				"          ORDER_DATE as date,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OrdersSink",
				"DropLineItemID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ORDER_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OrdersItemSink",
				"UpdatedTimestampCustomers sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as integer,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CustomersSink",
				"CastDataTypesProducts sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double,",
				"          UPDATE_TIMESTAMP as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ProductsSink",
				"DropWebAddressAndReorder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          UPDATE_TIMESTAMP as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StoresSink"
			]
		}
	}
}